#!/usr/bin/python
# Stargazer 1.0 [http://www.princeton.edu/~wjia/stargazer]
# Wenhao Jia [wjia@princeton.edu], Princeton University, 2012

# This file runs GPGPU-Sim v2.x for a specified number of times and puts the execution results in the current directory.
# Usage: python simulate.py
import sys
from subprocess import call
import random

# How the compiled benchmark program should be invoked in the command line. Include input arguments if necessary.
executable = './gpgpu_ptx_sim__BlackScholes'
# The resource usage of the program: number of registers per thread, amount of shared memory (in KB) per thread block, number of threads in each thread block. These values can be found in the .ptxinfo files generated by GPGPU-Sim Makefiles.
resources = [17, 52 + 16, 128]
# This is the maximum number of threads allowed on each core. Keep it as a big enough number so that block concurrency is determined by other parameters.
totalthread = 8192

# The name of the variable parameters.
parameters = ['blk', 'ccache', 'tcache', 'smp', 'intra', 'ccp', 'simd', 'mshr', 'dramq', 'inter']
# The range of value each parameter can take.
ranges = [[1, 2, 4, 8, 16],
          [8, 16, 32, 64, 128, 256],
          [8, 16, 32, 64, 128, 256],
          [1, 2, 4, 8],
          [1, 2, 4, 8],
          [1, 2, 4, 8],
          [8, 16, 32],
          [1, 2, 3],
          [16, 32, 64],
          [2, 6, 10]]
# Which keyword to look for in the gpgpusim.config file.
keywords = ['blk',
            'gpgpu_const_cache:l1',
            'gpgpu_tex_cache:l1',
            'gpgpu_shmem_port_per_bank',
            'gpgpu_cache_port_per_bank',
            'gpgpu_const_port_per_bank',
            'gpgpu_shader_core_pipeline',
            'gpgpu_mshr_per_thread',
            'gpgpu_dram_sched_queue_size',
            'gpgpu_interwarp_mshr_merge']
# How to replace each found line with intended values. The dollar sign is a placeholder for where the value appears.
templates = ['blk',
             '-gpgpu_const_cache:l1 $:64:2:L\n',
             '-gpgpu_tex_cache:l1 $:64:2:L\n',
             '-gpgpu_shmem_port_per_bank $\n',
             '-gpgpu_cache_port_per_bank $\n',
             '-gpgpu_const_port_per_bank $\n',
             '-gpgpu_shader_core_pipeline ' + str(totalthread) + ':$:$\n',
             '-gpgpu_mshr_per_thread $\n',
             '-gpgpu_dram_sched_queue_size $\n',
             '-gpgpu_interwarp_mshr_merge $\n']
# The number of simualtions to run (i.e. sample size).
nsample = 500
# The default random seed.
seed = 1

# ---- The end of configurable options ----

if len(parameters) != len(ranges):
    print 'Number of parameters is inconsistent with number of ranges.'
    sys.exit(1)
print 'Executable name: ' + executable
npoint = 1
for i in range(len(parameters)):
    npoint = npoint * len(ranges[i])
print 'Design space size: ' + str(npoint) + ' points'
if nsample >= npoint:
    print 'Number of samples should be smaller than design space size.'
    sys.exit(2)
print 'Number of samples: ' + str(nsample)

# Populate the samples randomly and store them in an array.
random.seed()
if len(sys.argv) > 1:
	random.seed(int(sys.argv[1]))
samples = []
for i in range(nsample):
    unique = False
    while not unique:
        sample = []
        for j in range(len(parameters)):
            sample.append(random.choice(ranges[j]))
        if samples.count(sample) == 0:
            unique = True
    samples.append(sample)
    print sample

# Generate the new configuration file according to the template.
for sample in samples:
    config = open('gpgpusim.config', 'r')
    lines = config.readlines()
    config.close()
    for parameter in parameters:
        if parameter == 'blk':
            k = sample[parameters.index(parameter)]
            regs = resources[0]
            shared = resources[1]
            nthread = resources[2]
            for line in lines:
                if line.find('gpgpu_shader_cta') != -1:
                    lines[lines.index(line)] = '-gpgpu_shader_cta ' + str(k) + '\n'
                if line.find('gpgpu_shader_registers') != -1:
                    if int(line[line.find(' ') + 1 : ]) < k * regs * nthread:
                        print 'Register file size is too small.'
                        sys.exit(3)
                if line.find('gpgpu_shmem_size') != -1:
                    if int(line[line.find(' ') + 1 : ]) < k * shared:
                        print 'Shared memory is too small.'
                        sys.exit(4)
                if line.find('gpgpu_shader_core_pipeline') != -1:
                    if int(line[line.find(' ') + 1 : line.find(':')]) < k * nthread:
                        print 'Thread count is too small.'
                        sys.exit(5)
        else:
            n = parameters.index(parameter)
            keyword = keywords[n]
            template = templates[n]
            for line in lines:
                if line.find(keyword) != -1:
                    lines[lines.index(line)] = template.replace('$', str(sample[n]))
    config = open('gpgpusim.config', 'w')
    for line in lines:
        config.write(line)
    config.close()

    # Run the simulation.
    filename = './'
    for parameter in parameters:
        n = parameters.index(parameter)
        filename = filename + parameter + '_' + str(sample[n])
        if n < len(parameters) - 1:
            filename = filename + '_'
        else:
            filename = filename + '.txt'
    output = open(filename, 'w')
    retcode = call(executable, stdout=output, shell=True)
    output.close()
    if retcode == 0:
        print 'Simulation ' + str(samples.index(sample) + 1) + ' of ' + str(nsample) + ' succeeded.'
    else:
        print 'Simulation ' + str(samples.index(sample) + 1) + ' of ' + str(nsample) + ' failed.'
    print filename + '\n'
    sys.stdout.flush()
