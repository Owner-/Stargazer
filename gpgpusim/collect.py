#!/usr/bin/python
# Stargazer 1.0 [http://www.princeton.edu/~wjia/stargazer]
# Wenhao Jia [wjia@princeton.edu], Princeton University, 2012

# This file collects simulation results generated by the simulate.py script in the current folder.
# Usage: python collect.py
import sys
import shutil
import os

# Change these parameters to be consistent with the content of simulate.py.
# The name of the variable parameters.
parameters = ['blk', 'ccache', 'tcache', 'smp', 'intra', 'ccp', 'simd', 'mshr', 'dramq', 'inter']
narg = len(parameters)
# The range of value each parameter can take.
ranges = [[1, 2, 4, 8, 16],
        [8, 16, 32, 64, 128, 256],
        [8, 16, 32, 64, 128, 256],
        [1, 2, 4, 8],
        [1, 2, 4, 8],
        [1, 2, 4, 8],
        [8, 16, 32],
        [1, 2, 3],
        [16, 32, 64],
        [2, 6, 10]]
# The size of each array in ranges[].
nrange = [5, 6, 6, 4, 4, 4, 3, 3, 3, 3]

# ---- The end of configurable options ----

# First find out the average size of all the files.
nfile = 0
totalsize = 0
files = os.listdir(".")
for f in files:
    nfile = nfile + 1
    totalsize = totalsize + os.path.getsize("./" + f)
if nfile == 0:
    print "No output file found in the current directory/.\n"
    sys.exit(1)
else:
    avgsize = totalsize / nfile
    print str(nfile) + " output files found. Average size " + str(avgsize) + "\n"

# Generate the CSV file.
size = 1
for i in range(narg):
    size = size * nrange[i]
print "Design space size: " + str(size) + " points"
csv = open("results.csv", "w")
for i in range(narg):
    csv.write(parameters[i] + ",")
csv.write("runtime\n")
# Permutate over size, the line number representing configuration.
nrow = 0;
for i in range(size):
    filename = "./"
    for j in range(narg):
        filename = filename + parameters[j] + "_"
        conf = i
        for k in range(j + 1, narg):
            conf = conf / nrange[k]
        conf = conf % nrange[j]
        val = ranges[j][conf]
        filename = filename + str(val)
        if j < narg - 1:
            filename = filename + "_"
        else:
            filename = filename + ".txt"
    # print "Looking for file " + filename + "..."
    if os.path.isfile(filename):
        print "Processing file " + str(nrow)
        # First check file size.
        if os.path.getsize(filename) < 0.7 * avgsize:
            print filename + " seems too small... skipped\n"
            continue
        for j in range(narg):
            conf = i
            for k in range(j + 1, narg):
                conf = conf / nrange[k]
            conf = conf % nrange[j]
            val = ranges[j][conf]
            csv.write(str(val) + ",")
            if j == 0:
                expectedo = val
        file = open(filename, "r")
        # Verify that concurrency is indeed what's claimed.
        found = False
        for line in file:
            if line.find("CTA/core") != -1:
                found = True
                realo = int(line[line.find("=") + 2 : line.find(",")])
                if realo != expectedo:
                    print filename + " has a wrong concurrency."
        if (not found):
            print filename + " has no concurrency."
        # Look for runtime.
        file.seek(0)
        found = False
        totalcycle = 0
        for line in file:
            if line.find("gpu_sim_cycle") != -1:
                found = True
                result = line[line.find("=") + 2 : ]
                totalcycle = totalcycle + int(result)
        if (not found):
            csv.write("0\n")
            print "Didn't find runtime in " + filename + ".\n"
        else:
            csv.write(str(totalcycle) + "\n")
        file.close()
        nrow = nrow + 1
print str(nrow) + " file(s) processed."
csv.close()
